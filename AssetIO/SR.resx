<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidAsset_Name" xml:space="preserve">
    <value>Specified integer "{0}" was not in the range [1, 128].</value>
  </data>
  <data name="Argument_InvalidAssetLen" xml:space="preserve">
    <value>Asset size exceeds the length of the buffer.</value>
  </data>
  <data name="Argument_InvalidAssetType" xml:space="preserve">
    <value>Invalid asset type; exactly one file flag and at most one directory flag must be set: "{0}".</value>
  </data>
  <data name="Argument_InvalidOffLen" xml:space="preserve">
    <value>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</value>
  </data>
  <data name="Argument_StreamNotReadable" xml:space="preserve">
    <value>Stream was not readable.</value>
  </data>
  <data name="Argument_StreamNotWritable" xml:space="preserve">
    <value>Stream was not writable.</value>
  </data>
  <data name="EndOfStream_AssetFile" xml:space="preserve">
    <value>End of file reached before assets were parsed: "{0}".</value>
  </data>
  <data name="EndOfStream_Stream" xml:space="preserve">
    <value>Unable to read beyond the end of the stream.</value>
  </data>
  <data name="IO_AssetEOF" xml:space="preserve">
    <value>The asset "{0}" extends past the end of "{1}".</value>
  </data>
  <data name="IO_BadAsset" xml:space="preserve">
    <value>Invalid asset data at offset {0} in "{1}".</value>
  </data>
  <data name="IO_BadManifest" xml:space="preserve">
    <value>Manifest.dat file was not divided in chunks of 148: "{0}".</value>
  </data>
  <data name="IO_InvalidDecimalBits" xml:space="preserve">
    <value>Decimal constructor requires an array or span of four valid decimal bytes.</value>
  </data>
  <data name="IO_NoMoreAssetDatFilesRead" xml:space="preserve">
    <value>Ran out of asset .dat files while reading "{0}".</value>
  </data>
  <data name="Overflow_TooManyAssets" xml:space="preserve">
    <value>Number of assets exceeds the maximum integer value: "{0}".</value>
  </data>
  <data name="Argument_CantInferAssetType" xml:space="preserve">
    <value>Unable to infer asset type from the specified file name: "{0}".</value>
  </data>
  <data name="Overflow_CantAddAsset" xml:space="preserve">
    <value>Cannot add "{0}" to "{1}"; asset .pack file exceeds maximum capacity.</value>
  </data>
  <data name="IO_BadAssetDat" xml:space="preserve">
    <value>Asset .dat file has an incorrect size ({0} != 209715200): "{1}".</value>
  </data>
  <data name="IO_NoMoreAssetDatFilesWrite" xml:space="preserve">
    <value>Ran out of asset .dat files while writing "{0}".</value>
  </data>
  <data name="NotSupported_PackTempWrite" xml:space="preserve">
    <value>Writing to .pack.temp files is not supported; convert the file to .pack first.</value>
  </data>
  <data name="IO_BadAssetInfo" xml:space="preserve">
    <value>Invalid asset info at offset {0} in "{1}"; listed assets exceed size of 8192 bytes.</value>
  </data>
  <data name="IO_CrcMismatch" xml:space="preserve">
    <value>The asset "{0}" does not match the expected CRC-32 ({1} != {2}) in "{3}".</value>
  </data>
  <data name="Argument_InvalidAssetName" xml:space="preserve">
    <value>Cannot add "{0}" to "{1}"; asset name length exceeds 128 bytes.</value>
  </data>
  <data name="InvalidAsset_Offset" xml:space="preserve">
    <value>Specified integer "{0}" was not in the range [0, 9223372036854775807].</value>
  </data>
  <data name="ArgumentOutOfRange_Enum" xml:space="preserve">
    <value>Enum value was out of legal range.</value>
  </data>
  <data name="InvalidOperation_NoAssetToWrite" xml:space="preserve">
    <value>Cannot write to an asset that does not exist. Call Add to create an asset or specify the asset name in Write.</value>
  </data>
  <data name="InvalidOperation_NoAssetToFlush" xml:space="preserve">
    <value>Cannot flush an asset that does not exist. Call Add to create an asset.</value>
  </data>
  <data name="IO_AssetTooLong2GB" xml:space="preserve">
    <value>The asset "{0}" is too long. This operation is limited to supporting assets less than 2 gigabytes in size.</value>
  </data>
  <data name="IO_CantCreateTempFile" xml:space="preserve">
    <value>Cannot create temporary file "{0}"; the file already exists.</value>
  </data>
  <data name="Argument_InvalidSeekOrigin" xml:space="preserve">
    <value>Invalid seek origin.</value>
  </data>
  <data name="NotSupported_UnwritableStream" xml:space="preserve">
    <value>Stream does not support writing.</value>
  </data>
  <data name="Argument_InvalidStringLen" xml:space="preserve">
    <value>{0}-byte read exceeds the maximum string length.</value>
  </data>
</root>